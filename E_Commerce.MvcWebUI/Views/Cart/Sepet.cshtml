@model IEnumerable<Cart>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Basket</title>
    <link rel="stylesheet" href="~/E_Commerce_Theme/css/sepet.css" />
</head>

<body> 
      <main> 
                  <h3>Sepetim</h3>
          @if (Model != null)
            {
            <div class="basket">

                <div class="basket-labels">
                    <ul>
                        <li class="item item-heading">Ürün</li>
                        <li class="price">Tutar</li>
                        <li class="quantity">Adet</li>
                        <li class="subtotal">Ara Toplam</li>
                    </ul>
                </div>

                @foreach (var item in Model)
                {
                    <div class="basket-product">
                        <div class="item">
                            <div class="product-image">
                                <img src="~/@item.Image" alt="@item.Name" class="product-frame">
                            </div>
                            <div class="product-details">
                                <h1><strong><span class="item-quantity">@item.Quantity</span> x </strong> @item.Name</h1>

                                <p>Ürün Kodu - @item.ProductCode</p>
                            </div>
                        </div>
                        <div class="price">@item.Price</div>
                        <div class="quantity">
                            <input type="number" value="@item.Quantity" min="1" class="quantity-field">
                        </div>
                        <div class="subtotal">@item.RowTotal</div>
                        <div class="remove">
                            <a asp-action="SepettenUrunSil" asp-controller="Cart" asp-route-id="@item.Id">Kaldır</a>
                        </div>
                    </div>
                } 
            </div>
            <aside>
                <div class="summary">
                <div class="summary-total-items"><span class="total-items"></span> Sepetindeki Ürünler</div>
                <div class="summary-subtotal">
                    <div class="subtotal-title">Ara Toplam</div>
                    <div class="subtotal-value final-value" id="basket-subtotal">@Model.Sum(x=>x.Price*x.Quantity)</div>
                
                <div class="summary-checkout">
                    <button class="checkout-cta" onclick="siparisiTamamla">Siparişi Tamamla.</button>
                 </div>
            </div>
        </aside>
          }   else
        {
              <div class="basket-product">
                <div class="item"> 
                    <div class="product-details">
                        <h1><strong><span class="item-quantity"></strong>Sepetinşzde ürün bulunamadı.</h1>  
                    </div>
                </div>  
                </div>
        }
    </main>
</body>

<script>
    /* Set values + misc */
    var promoCode;
    var promoPrice;
    var fadeTime = 300;

    /* Assign actions */
    $('.quantity input').change(function() {
      updateQuantity(this);
    });

    $('.remove button').click(function() {
      removeItem(this);
    });

    $(document).ready(function() {
      updateSumItems();
    });

    $('.promo-code-cta').click(function() {

      promoCode = $('#promo-code').val();

      if (promoCode == '10off' || promoCode == '10OFF') {
        //If promoPrice has no value, set it as 10 for the 10OFF promocode
        if (!promoPrice) {
          promoPrice = 10;
        } else if (promoCode) {
          promoPrice = promoPrice * 1;
        }
      } else if (promoCode != '') {
        alert("Invalid Promo Code");
        promoPrice = 0;
      }
      //If there is a promoPrice that has been set (it means there is a valid promoCode input) show promo
      if (promoPrice) {
        $('.summary-promo').removeClass('hide');
        $('.promo-value').text(promoPrice.toFixed(2));
        recalculateCart(true);
      }
    });

    /* Recalculate cart */
    function recalculateCart(onlyTotal) {
      var subtotal = 0;

      /* Sum up row totals */
      $('.basket-product').each(function() {
        subtotal += parseFloat($(this).children('.subtotal').text());
      });

      /* Calculate totals */
      var total = subtotal;

      //If there is a valid promoCode, and subtotal < 10 subtract from total
      var promoPrice = parseFloat($('.promo-value').text());
      if (promoPrice) {
        if (subtotal >= 10) {
          total -= promoPrice;
        } else {
          alert('Order must be more than £10 for Promo code to apply.');
          $('.summary-promo').addClass('hide');
        }
      }

      /*If switch for update only total, update only total display*/
      if (onlyTotal) {
        /* Update total display */
        $('.total-value').fadeOut(fadeTime, function() {
          $('#basket-total').html(total.toFixed(2));
          $('.total-value').fadeIn(fadeTime);
        });
      } else {
        /* Update summary display. */
        $('.final-value').fadeOut(fadeTime, function() {
          $('#basket-subtotal').html(subtotal.toFixed(2));
          $('#basket-total').html(total.toFixed(2));
          if (total == 0) {
            $('.checkout-cta').fadeOut(fadeTime);
          } else {
            $('.checkout-cta').fadeIn(fadeTime);
          }
          $('.final-value').fadeIn(fadeTime);
        });
      }
    }

    /* Update quantity */
    function updateQuantity(quantityInput) {
      /* Calculate line price */
      var productRow = $(quantityInput).parent().parent();
      var price = parseFloat(productRow.children('.price').text());
      var quantity = $(quantityInput).val();
      var linePrice = price * quantity;

      /* Update line price display and recalc cart totals */
      productRow.children('.subtotal').each(function() {
        $(this).fadeOut(fadeTime, function() {
          $(this).text(linePrice.toFixed(2));
          recalculateCart();
          $(this).fadeIn(fadeTime);
        });
      });

      productRow.find('.item-quantity').text(quantity);
      updateSumItems();
    }

    function updateSumItems() {
      var sumItems = 0;
      $('.quantity input').each(function() {
        sumItems += parseInt($(this).val());
      });
      $('.total-items').text(sumItems);
    }
    function siparisiTamamla() {
        MessageBox.Show("Sipariş Oluşturuldu !", "Kargo durumundan sonra bilgilendirileceksiniz.", MessageBoxButtons.OK, MessageBoxIcon.Information);
        var productRow = $(removeButton).parent().parent();
      productRow.slideUp(fadeTime, function() {
        productRow.remove();
        recalculateCart();
        updateSumItems();
      });
    }
    /* Remove item from cart */
    function removeItem(removeButton) {
      /* Remove row from DOM and recalc cart total */
      var productRow = $(removeButton).parent().parent();
      productRow.slideUp(fadeTime, function() {
        productRow.remove();
        recalculateCart();
        updateSumItems();
      });
    }
</script>

</html>
